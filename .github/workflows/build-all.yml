name: Build All MCP Servers

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/mcp-

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate build matrix
        id: set-matrix
        run: |
          SERVERS=$(jq -c '.servers | to_entries | map(select(.value.supported == true) | .key)' servers/registry.json)
          echo "matrix=$SERVERS" >> $GITHUB_OUTPUT
          echo "Found servers: $SERVERS"

  build:
    needs: build-matrix
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      matrix:
        server: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' || inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get server metadata
        id: meta
        run: |
          CONFIG_PATH=$(jq -r ".servers.${{ matrix.server }}.configPath" servers/registry.json)
          VERSION=$(grep "version:" "servers/$CONFIG_PATH" | awk '{print $2}')
          TYPE=$(jq -r ".servers.${{ matrix.server }}.type" servers/registry.json)
          echo "config_path=$CONFIG_PATH" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "Building ${{ matrix.server }} v$VERSION (type: $TYPE)"
          
      - name: Build base image (Python)
        if: steps.meta.outputs.type == 'python'
        uses: docker/build-push-action@v5
        with:
          context: servers/python/base
          file: servers/python/base/Dockerfile.python
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/mcp-python-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name == 'push' || inputs.push_images == 'true' }}
          load: true
          
      - name: Build base image (Node)
        if: steps.meta.outputs.type == 'node'
        uses: docker/build-push-action@v5
        with:
          context: servers/node/base
          file: servers/node/base/Dockerfile.node
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/mcp-node-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name == 'push' || inputs.push_images == 'true' }}
          load: true
          
      - name: Build server image
        uses: docker/build-push-action@v5
        with:
          context: servers/${{ steps.meta.outputs.type }}/${{ matrix.server }}
          file: servers/${{ steps.meta.outputs.type }}/${{ matrix.server }}/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name == 'push' || inputs.push_images == 'true' }}
          
      - name: Run Trivy vulnerability scanner
        if: github.event_name == 'push' || inputs.push_images == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name == 'push' || inputs.push_images == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  update-registry:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Update registry timestamp
        run: |
          jq '.updated = now | strftime("%Y-%m-%dT%H:%M:%SZ")' servers/registry.json > servers/registry.json.tmp
          mv servers/registry.json.tmp servers/registry.json
          
      - name: Commit registry update
        uses: EndBug/add-and-commit@v9
        with:
          add: 'servers/registry.json'
          message: 'chore: update registry timestamp [skip ci]'
          default_author: github_actions