name: Build MCP Servers

on:
  workflow_dispatch:
    inputs:
      servers:
        description: 'Servers to build (comma-separated, e.g. "time,playwright" or "all")'
        required: false
        default: 'all'
        type: string
      force_build:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean
      build_base:
        description: 'Also rebuild base images'
        required: false
        default: false
        type: boolean
      push_images:
        description: 'Push built images to registry'
        required: false
        default: false
        type: boolean
  workflow_call:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/mcp-

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.changes.outputs.servers }}
      base-changed: ${{ steps.changes.outputs.base }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Build dynamic file patterns
        id: file-patterns
        run: |
          # Build the files_yaml content dynamically from registry
          echo "files_yaml<<EOF" >> $GITHUB_OUTPUT
          echo "base:" >> $GITHUB_OUTPUT
          echo "  - servers/python/base/**" >> $GITHUB_OUTPUT
          echo "  - servers/node/base/**" >> $GITHUB_OUTPUT
          
          # Add each server from registry
          jq -r '.servers | to_entries[] | select(.value.supported == true) | .key as $server | .value.configPath as $path | "\($server):\n  - servers/\($path | split("/") | .[0])/\($server)/**"' servers/registry.json >> $GITHUB_OUTPUT
          
          echo "registry:" >> $GITHUB_OUTPUT
          echo "  - servers/registry.json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          json: true
          files_yaml: ${{ steps.file-patterns.outputs.files_yaml }}
      
      - name: Determine servers to build
        id: changes
        run: |
          # Get all supported servers from registry
          ALL_SERVERS=$(jq -r '.servers | to_entries[] | select(.value.supported == true) | .key' servers/registry.json | jq -R -s -c 'split("\n")[:-1]')
          echo "All supported servers: $ALL_SERVERS"
          
          # Handle manual workflow dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Check if manual server selection is provided
            if [ -n "${{ inputs.servers }}" ]; then
              if [ "${{ inputs.servers }}" == "all" ]; then
                # Build all servers
                SERVERS=$ALL_SERVERS
              else
                # Build specified servers
                SERVERS=$(echo "${{ inputs.servers }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
              fi
              echo "Manual build requested for: $SERVERS"
            else
              # No servers specified, use normal change detection
              MANUAL_MODE=false
            fi
            
            # Handle base image rebuild request
            if [ "${{ inputs.build_base }}" == "true" ]; then
              echo "base=true" >> $GITHUB_OUTPUT
            fi
            
            # Force build if requested
            if [ "${{ inputs.force_build }}" == "true" ] && [ -z "${{ inputs.servers }}" ]; then
              # Force build all servers
              SERVERS=$ALL_SERVERS
              echo "Force build all servers"
            fi
          fi
          
          # Normal change detection if not manually specified
          if [ -z "$SERVERS" ]; then
            # Check if base images changed
            if [ "${{ steps.changed-files.outputs.base_any_changed }}" == "true" ]; then
              echo "base=true" >> $GITHUB_OUTPUT
              # If base changed, rebuild all servers
              SERVERS=$ALL_SERVERS
            else
              # Build only changed servers
              SERVERS='[]'
              
              # Check if registry changed (MCP commits updated)
              if [ "${{ steps.changed-files.outputs.registry_any_changed }}" == "true" ]; then
                echo "Registry changed, checking for MCP commit updates..."
                
                # Get previous and current registry contents
                git show HEAD^:servers/registry.json > /tmp/registry_old.json
                cp servers/registry.json /tmp/registry_new.json
                
                # Check each server for commit changes
                for server in $(echo $ALL_SERVERS | jq -r '.[]'); do
                  OLD_COMMIT=$(jq -r ".servers.$server.gitCommit // \"null\"" /tmp/registry_old.json)
                  NEW_COMMIT=$(jq -r ".servers.$server.gitCommit // \"null\"" /tmp/registry_new.json)
                  
                  if [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
                    echo "MCP commit changed for $server: $OLD_COMMIT -> $NEW_COMMIT"
                    SERVERS=$(echo $SERVERS | jq --arg server "$server" '. += [$server]')
                  fi
                done
              fi
              
              # Check for direct file changes dynamically for each server
              for server in $(echo $ALL_SERVERS | jq -r '.[]'); do
                # Get the output variable name for this server
                VAR_NAME="${server}_any_changed"
                VAR_VALUE=$(eval echo \${{ steps.changed-files.outputs.${VAR_NAME} }})
                
                if [ "$VAR_VALUE" == "true" ]; then
                  echo "Files changed for $server"
                  SERVERS=$(echo $SERVERS | jq --arg server "$server" '. += [$server]')
                fi
              done
              
              # Remove duplicates
              SERVERS=$(echo $SERVERS | jq 'unique')
            fi
          fi
          
          echo "servers=$SERVERS" >> $GITHUB_OUTPUT
          echo "Servers to build: $SERVERS"

  build-base:
    needs: detect-changes
    if: needs.detect-changes.outputs.base-changed == 'true' || (github.event_name == 'workflow_dispatch' && inputs.build_base == true)
    uses: ./.github/workflows/build-base-images.yml
    with:
      push_images: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.push_images) }}
      image_tag_suffix: ${{ github.event_name == 'pull_request' && format('-pr-{0}', github.event.pull_request.number) || '' }}
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read
      attestations: write
      id-token: write
    secrets: inherit

  build-servers:
    needs: [detect-changes, build-base]
    if: always() && needs.detect-changes.outputs.servers != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      security-events: write
      actions: read
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        server: ${{ fromJson(needs.detect-changes.outputs.servers) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get server metadata
        id: meta
        run: |
          # Get server info from registry
          CONFIG_PATH=$(jq -r ".servers.${{ matrix.server }}.configPath" servers/registry.json)
          TYPE=$(jq -r ".servers.${{ matrix.server }}.type" servers/registry.json)
          
          # Get version from config
          VERSION=$(grep "version:" "servers/$CONFIG_PATH" | awk '{print $2}')
          
          # Get MCP repo commit from registry
          MCP_COMMIT=$(jq -r ".servers.${{ matrix.server }}.gitCommit" servers/registry.json)
          MCP_COMMIT_SHORT="${MCP_COMMIT:0:7}"
          
          echo "config_path=$CONFIG_PATH" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "mcp_commit=$MCP_COMMIT" >> $GITHUB_OUTPUT
          echo "mcp_commit_short=$MCP_COMMIT_SHORT" >> $GITHUB_OUTPUT
          
          echo "Building ${{ matrix.server }} v$VERSION (MCP commit: $MCP_COMMIT_SHORT)"
      
      - name: Check if rebuild needed
        id: check-rebuild
        run: |
          # Check if we have the MCP commit
          if [ "${{ steps.meta.outputs.mcp_commit }}" == "null" ] || [ -z "${{ steps.meta.outputs.mcp_commit }}" ]; then
            echo "No MCP commit found for ${{ matrix.server }}, skipping build"
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [ "${{ needs.detect-changes.outputs.base-changed }}" == "true" ]; then
            echo "Base image changed, rebuilding ${{ matrix.server }}"
            echo "skip=false" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ inputs.force_build }}" == "true" ]; then
            echo "Force build requested for ${{ matrix.server }}"
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            # For normal builds, always build when there are changes to our server files
            echo "Building ${{ matrix.server }}"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push server image
        if: steps.check-rebuild.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: servers/${{ steps.meta.outputs.type }}/${{ matrix.server }}
          file: servers/${{ steps.meta.outputs.type }}/${{ matrix.server }}/Dockerfile
          build-args: |
            BASE_IMAGE_TAG=${{ needs.build-base.result == 'success' && github.event_name == 'pull_request' && format('latest-pr-{0}', github.event.pull_request.number) || 'latest' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:${{ steps.meta.outputs.mcp_commit_short }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.meta.outputs.mcp_commit }}
            mcp.commit=${{ steps.meta.outputs.mcp_commit }}
            mcp.server=${{ matrix.server }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.push_images) }}
      
      - name: Run Trivy vulnerability scanner
        if: steps.check-rebuild.outputs.skip != 'true' && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.push_images))
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}${{ matrix.server }}:latest
          scan-type: 'image'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
      
      - name: Upload Trivy scan results
        if: steps.check-rebuild.outputs.skip != 'true' && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.push_images))
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'