name: Sync MCP Repository Commits

on:
  workflow_dispatch:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'

jobs:
  sync-commits:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Sync MCP repository commits
        run: |
          echo "Syncing MCP repository commits..."
          SYNC_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Create a temporary file for the updated registry
          cp servers/registry.json servers/registry.json.tmp
          
          # Function to get latest commit from a GitHub repo
          get_latest_commit() {
            local repo=$1
            local path=$2
            
            # Extract owner and repo name from URL
            if [[ $repo =~ github\.com/([^/]+)/([^/]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo_name="${BASH_REMATCH[2]}"
              
              # Remove .git suffix if present
              repo_name="${repo_name%.git}"
              
              # Handle URLs with /tree/main/path
              if [[ $repo =~ /tree/main/(.+)$ ]]; then
                path="${BASH_REMATCH[1]}"
                repo_url="https://github.com/$owner/$repo_name"
              else
                repo_url="$repo"
              fi
              
              echo "Fetching commit for $owner/$repo_name${path:+ path: $path}" >&2
              
              # Use GitHub API to get the latest commit
              if [ -n "$path" ]; then
                # Get commit for specific path
                commit=$(curl -s "https://api.github.com/repos/$owner/$repo_name/commits?path=$path&per_page=1" | jq -r '.[0].sha // empty')
              else
                # Get latest commit for entire repo
                commit=$(curl -s "https://api.github.com/repos/$owner/$repo_name/commits?per_page=1" | jq -r '.[0].sha // empty')
              fi
              
              if [ -n "$commit" ]; then
                echo "$commit"
              else
                echo "null"
              fi
            else
              echo "null"
            fi
          }
          
          # Update time server
          echo "Updating time server..."
          TIME_COMMIT=$(get_latest_commit "https://github.com/modelcontextprotocol/servers/tree/main/src/time" "src/time")
          jq --arg commit "$TIME_COMMIT" --arg date "$SYNC_DATE" \
            '.servers.time.gitCommit = $commit | .servers.time.lastSync = $date' \
            servers/registry.json.tmp > servers/registry.json.tmp2
          mv servers/registry.json.tmp2 servers/registry.json.tmp
          
          # Update playwright server
          echo "Updating playwright server..."
          PLAYWRIGHT_COMMIT=$(get_latest_commit "https://github.com/microsoft/playwright-mcp")
          jq --arg commit "$PLAYWRIGHT_COMMIT" --arg date "$SYNC_DATE" \
            '.servers.playwright.gitCommit = $commit | .servers.playwright.lastSync = $date' \
            servers/registry.json.tmp > servers/registry.json.tmp2
          mv servers/registry.json.tmp2 servers/registry.json.tmp
          
          # Update zettelkasten server
          echo "Updating zettelkasten server..."
          ZETTELKASTEN_COMMIT=$(get_latest_commit "https://github.com/entanglr/zettelkasten-mcp")
          jq --arg commit "$ZETTELKASTEN_COMMIT" --arg date "$SYNC_DATE" \
            '.servers.zettelkasten.gitCommit = $commit | .servers.zettelkasten.lastSync = $date' \
            servers/registry.json.tmp > servers/registry.json.tmp2
          mv servers/registry.json.tmp2 servers/registry.json.tmp
          
          # Update the main updated timestamp
          jq --arg date "$SYNC_DATE" '.updated = $date' \
            servers/registry.json.tmp > servers/registry.json.tmp2
          mv servers/registry.json.tmp2 servers/registry.json.tmp
          
          # Move the updated file back
          mv servers/registry.json.tmp servers/registry.json
          
          echo "Sync completed at $SYNC_DATE"
          echo "Time server commit: $TIME_COMMIT"
          echo "Playwright server commit: $PLAYWRIGHT_COMMIT"
          echo "Zettelkasten server commit: $ZETTELKASTEN_COMMIT"
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --exit-code servers/registry.json; then
            echo "No changes to commit"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Registry has changes"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          git add servers/registry.json
          git commit -m "chore: sync MCP repository commits [skip ci]"
          git push origin main
      
      - name: Trigger builds if commits changed
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-servers.yml',
              ref: 'main'
            });